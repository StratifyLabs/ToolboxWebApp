[{"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/index.js":"1","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/reportWebVitals.js":"2","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/App.js":"3","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/Top.js":"4","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Network.js":"5","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/SideBar.js":"6","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Terminal.js":"7","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/DebugClient.js":"8","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Insights.js":"9","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/InsightDetail.js":"10","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Plot.js":"11","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Logic.js":"12","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Histogram.js":"13","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Log.js":"14","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Theme.js":"15","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Debug.js":"16","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Flash.js":"17","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Trace.js":"18","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Settings.js":"19","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Property.js":"20","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Bitrate.js":"21","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Boolean.js":"22","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Delegate.js":"23","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/QuickStart.js":"24","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/About.js":"25","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Files.js":"26","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/Section.js":"27","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Reference.js":"28","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/InternalJump.js":"29","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/ExternalJump.js":"30","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/GetRequest.js":"31","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/AppContainer.js":"32","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/SettingsObject.js":"33","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/contexts/NetworkContext.js":"34","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/TextInput.js":"35","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/FlashSettings.js":"36","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/DebugSettings.js":"37","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/TraceSettings.js":"38","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/LoadingSpinner.js":"39","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/PostRequest.js":"40","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/PutRequest.js":"41","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/UserFileUpload.js":"42"},{"size":500,"mtime":1608776256516,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1608776256517,"results":"45","hashOfConfig":"44"},{"size":3961,"mtime":1612055785139,"results":"46","hashOfConfig":"44"},{"size":934,"mtime":1611984730593,"results":"47","hashOfConfig":"44"},{"size":810,"mtime":1609389201512,"results":"48","hashOfConfig":"44"},{"size":1996,"mtime":1612066658482,"results":"49","hashOfConfig":"44"},{"size":475,"mtime":1612118039691,"results":"50","hashOfConfig":"44"},{"size":4179,"mtime":1612056856624,"results":"51","hashOfConfig":"44"},{"size":1777,"mtime":1612118050499,"results":"52","hashOfConfig":"44"},{"size":893,"mtime":1612118062001,"results":"53","hashOfConfig":"44"},{"size":625,"mtime":1609432190963,"results":"54","hashOfConfig":"44"},{"size":2903,"mtime":1609433435409,"results":"55","hashOfConfig":"44"},{"size":1324,"mtime":1609432796059,"results":"56","hashOfConfig":"44"},{"size":876,"mtime":1609430249669,"results":"57","hashOfConfig":"44"},{"size":5847,"mtime":1609431513731,"results":"58","hashOfConfig":"44"},{"size":2025,"mtime":1612036329332,"results":"59","hashOfConfig":"44"},{"size":2224,"mtime":1612118012425,"results":"60","hashOfConfig":"44"},{"size":1062,"mtime":1612068155011,"results":"61","hashOfConfig":"44"},{"size":1432,"mtime":1612061347061,"results":"62","hashOfConfig":"44"},{"size":780,"mtime":1611982033323,"results":"63","hashOfConfig":"44"},{"size":405,"mtime":1612060730489,"results":"64","hashOfConfig":"44"},{"size":434,"mtime":1612058342316,"results":"65","hashOfConfig":"44"},{"size":694,"mtime":1612061412942,"results":"66","hashOfConfig":"44"},{"size":2247,"mtime":1612025413833,"results":"67","hashOfConfig":"44"},{"size":765,"mtime":1612024932830,"results":"68","hashOfConfig":"44"},{"size":4667,"mtime":1612119257988,"results":"69","hashOfConfig":"44"},{"size":457,"mtime":1611989913948,"results":"70","hashOfConfig":"44"},{"size":11654,"mtime":1612070680933,"results":"71","hashOfConfig":"44"},{"size":497,"mtime":1612036607470,"results":"72","hashOfConfig":"44"},{"size":430,"mtime":1612036603567,"results":"73","hashOfConfig":"44"},{"size":2012,"mtime":1612055918221,"results":"74","hashOfConfig":"44"},{"size":228,"mtime":1612029048993,"results":"75","hashOfConfig":"44"},{"size":2055,"mtime":1612060809906,"results":"76","hashOfConfig":"44"},{"size":222,"mtime":1612055456528,"results":"77","hashOfConfig":"44"},{"size":473,"mtime":1612060668629,"results":"78","hashOfConfig":"44"},{"size":1901,"mtime":1612061152549,"results":"79","hashOfConfig":"44"},{"size":1459,"mtime":1612061100825,"results":"80","hashOfConfig":"44"},{"size":626,"mtime":1612061134493,"results":"81","hashOfConfig":"44"},{"size":374,"mtime":1612057327935,"results":"82","hashOfConfig":"44"},{"size":2015,"mtime":1612070060047,"results":"83","hashOfConfig":"44"},{"size":2012,"mtime":1612070076725,"results":"84","hashOfConfig":"44"},{"size":1537,"mtime":1612118704836,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1r4for7",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"88"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"88"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"88"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"88"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/index.js",[],["196","197"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/reportWebVitals.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/App.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/Top.js",["198","199","200","201","202","203","204"],"import React from 'react'\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, NavbarBrand, Badge } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight, faSync, faStop } from '@fortawesome/free-solid-svg-icons'\n\nconst Top = props => {\n\n  const serverStatus = props.serverStatus;\n\n  return (\n    <Navbar bg=\"light\" expand=\"sm\" className=\"mb-2\" className=\"border-bottom navbar-expand-lg\">\n      <Button variant=\"outline-secondary\" className=\"mr-2\" onClick={() => props.menuClicked() }><FontAwesomeIcon icon={faChevronRight} rotation={props.isSidebarOpen ? 180 : 0}/></Button>\n      <Button variant={serverStatus}>\n        <FontAwesomeIcon icon={serverStatus === \"success\" ? faStop : faSync} /> {props.server}\n        </Button>\n      <Navbar.Brand href=\"#home\" className=\"ml-auto\">{props.page} | Stratify Toolbox</Navbar.Brand>\n    </Navbar>\n  )\n}\n\nexport default Top\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Network.js",["205","206","207"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\n\n\nconst Network = props => {\n\n  const [input, setInput] = React.useState(props.server)\n\n  return (\n    <div>\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Server</Form.Label>\n          <Form.Control type=\"input\" placeholder=\"http://a.b.c.d:3002\" defaultValue={props.server} onChange={(item) => {\n            props.setServer(item.target.value)\n          }} />\n          <Form.Text className=\"text-muted\">\n            IP Address of Toolbox\n          </Form.Text>\n        </Form.Group>\n        <Button variant=\"primary\" onClick={() => {\n          //ping the server to see if it is listening\n        }}>\n          Ping\n            </Button>\n      </Form>\n    </div >\n  )\n}\n\nexport default Network\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/SideBar.js",["208"],"import React from 'react'\nimport { ListGroup  } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faBook,\n  faNetworkWired,\n  faChartArea,\n  faFolderOpen,\n  faInfoCircle,\n  faBug,\n  faBolt,\n  faWaveSquare,\n  faPlay,\n  faSlidersH,\n  faTerminal\n} from '@fortawesome/free-solid-svg-icons'\n\n\nconst Item = props => {\n  return (\n    <ListGroup.Item action onClick={() => props.setPage(props.name)} active={props.page == props.name}>\n      <FontAwesomeIcon icon={props.icon} /> {props.name}\n    </ListGroup.Item>\n  )\n}\n\nconst SideBar = props => {\n\n  return (\n    <div>\n      <h5 className=\"ml-2 mr-2\">TARGET</h5>\n      <ListGroup variant=\"flush\" className=\"mb-2\">\n        <Item setPage={props.setPage} icon={faBug} name=\"Debug\" page={props.page} />\n        <Item setPage={props.setPage} icon={faBolt} name=\"Flash\" page={props.page} />\n        <Item setPage={props.setPage} icon={faWaveSquare} name=\"Trace\" page={props.page} />\n        <Item setPage={props.setPage} icon={faTerminal} name=\"Terminal\" page={props.page} />\n        <Item setPage={props.setPage} icon={faChartArea} name=\"Insights\" page={props.page} />\n        <Item setPage={props.setPage} icon={faSlidersH} name=\"Settings\" page={props.page} />\n        <Item setPage={props.setPage} icon={faFolderOpen} name=\"Files\" page={props.page} />\n      </ListGroup>\n      <h5 className=\"ml-2 mr-2\">DOCS</h5>\n      <ListGroup variant=\"flush\" className=\"mb-2\">\n        <Item setPage={props.setPage} icon={faPlay} name=\"Quick Start\" page={props.page} />\n        <Item setPage={props.setPage} icon={faBook} name=\"Reference\" page={props.page} />\n        <Item setPage={props.setPage} icon={faInfoCircle} name=\"About\" page={props.page} />\n      </ListGroup>\n      <h5 className=\"ml-2 mr-2\">EXTRA</h5>\n      <ListGroup variant=\"flush\" className=\"mb-2\">\n        <Item setPage={props.setPage} icon={faNetworkWired} name=\"Network\" page={props.page} />\n      </ListGroup>\n    </div>\n  )\n}\n\nexport default SideBar\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Terminal.js",["209"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/DebugClient.js",["210","211","212","213"],"import React from 'react'\nimport { Toast } from 'react-bootstrap'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfo } from '@fortawesome/free-solid-svg-icons'\n\nconst DebugClient = props => {\n\n  const [incoming, setIncoming] = React.useState(\"\");\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  const configuration = props.configuration;\n  const setConfiguration = props.setConfiguration;\n  const dataList = props.data;\n  const setDataList = props.setData;\n  const serverStatus = props.serverStatus;\n  const setServerStatus = props.setServerStatus;\n\n  function processData(dataName, value, configurationNext) {\n    const dataItem = dataList[dataName];\n    if (dataItem !== undefined && dataItem.configurations !== undefined) {\n      //add the input to each output\n      dataItem.configurations.forEach((configurationName, index) => {\n        if (configurationNext[configurationName] !== undefined && configurationNext[configurationName].data[dataName] !== undefined) {\n          configurationNext[configurationName].data[dataName].push(value);\n        }\n      })\n    }\n  }\n\n  function processConfig(configurationName, item, configurationNext, dataListNext) {\n    //make sure item is valid\n    if (item.data !== undefined && item.type !== undefined) {\n      //item type must be plot, hist, log, raw, etc\n      if (configurationNext[configurationName] === undefined) {\n        configurationNext[configurationName] = item;\n      }\n\n      //now associate the data with the configuration in the data list\n      const dataKeys = Object.keys(item.data);\n      dataKeys.forEach((dataName, index) => {\n        if (dataListNext[dataName] === undefined) {\n          dataListNext[dataName] = {\n            configurations: [configurationName]\n          }\n        } else {\n          let configurationList = dataListNext[dataName].configurations;\n          if (configurationList.indexOf(configurationName) < 0) {\n            configurationList.push(configurationName);\n          }\n        }\n      });\n    }\n  }\n\n  /*\n  React.useEffect(() => {\n    console.log(\"create new event source\");\n \n\n    const source = new EventSource(`${props.server}/terminal`);\n\n \n    source.onopen = function (event) {\n      setNewMessage(`connected to ${props.server}`);\n      setServerStatus(\"success\");\n    }\n\n    source.addEventListener('error', function (e) {\n      setNewMessage(`failed to connect to ${props.server}`);\n      setServerStatus(\"danger\");\n    }, false);\n\n    source.onmessage = function (event) {\n      setIncoming(String(event.data));\n    }\n    \n\n\n    return () => {\n      setServerStatus(\"danger\");\n      setNewMessage(`closed connection to ${props.server}`);\n      console.log(\"cleanup event source\");\n      source.close();\n    }\n\n  }, [])\n  */\n\n  React.useEffect(() => {\n    const lines = String(incoming).split(\"\\n\");\n\n    let configurationNext = Object.assign({}, configuration);\n    let dataListNext = Object.assign({}, dataList);\n\n    function processItem(item) {\n      const keys = Object.keys(item);\n\n      keys.forEach((key) => {\n        if (item[key].type !== undefined) {\n          processConfig(key, item[key], configurationNext, dataListNext);\n        } else {\n          processData(key, item[key], configurationNext);\n        }\n      });\n\n    }\n\n    lines.forEach((item, index) => {\n      if (item.length > 0) {\n        try {\n          const value = JSON.parse(item);\n          if (Array.isArray(value)) {\n            value.forEach((item, index) => {\n              processItem(item);\n            })\n          } else {\n            processItem(value);\n          }\n        } catch (e) {\n          console.log(e);\n        }\n\n      }\n    })\n\n    setDataList(dataListNext);\n    setConfiguration(configurationNext);\n\n  }, [incoming])\n\n  return (\n    <div>\n      <Toast\n        style={{\n          position: 'absolute',\n          top: 75,\n          right: 10,\n        }}\n        autohide={true}\n        animation={true}\n        show={newMessage !== \"\"}\n        onClose={() => { setNewMessage(\"\") }}\n      >\n        <Toast.Body><FontAwesomeIcon icon={faInfo} /> {newMessage}</Toast.Body>\n      </Toast>\n    </div>\n  )\n}\n\nexport default DebugClient\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Insights.js",["214"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/InsightDetail.js",["215"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Plot.js",["216","217","218","219","220","221","222"],"import React from 'react'\nimport { Card, Button } from 'react-bootstrap'\nimport { Chart } from 'react-charts'\nimport { Line, Scatter } from 'react-chartjs-2'\nimport { VictoryChart, VictoryZoomContainer, VictoryLine, VictoryScatter } from \"victory\";\nimport Theme from './Theme'\n\nconst Plot = props => {\n\n  return (\n    <VictoryChart domainPadding={{ y: 5 }}\n    theme={Theme} \n    height={250}\n    >\n      { Object.keys(props.configuration.data).map((key, index) => {\n        return <VictoryLine data={props.configuration.data[key]} x={0} y={1} key={\"series\" + key} />\n      })}\n    </VictoryChart>\n  )\n}\n\nexport default Plot\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Logic.js",["223","224","225","226","227","228","229"],"import React from 'react'\nimport { Card, Button } from 'react-bootstrap'\nimport { Chart } from 'react-charts'\nimport { Line, Scatter } from 'react-chartjs-2'\nimport {\n  createContainer,\n  VictoryChart,\n  VictoryZoomContainer,\n  VictoryCursorContainer,\n  VictoryLine,\n  VictoryBrushContainer,\n  VictoryAxis,\n  VictoryLegend\n} from \"victory\";\n\nimport Theme from './Theme'\n\n\nconst Logic = props => {\n\n  const [zoomDomain, setZoomDomain] = React.useState({ zoomDomain: { x: [] } });\n\n  function handleZoom(domain) {\n    setZoomDomain(domain);\n  }\n\n  const VictoryZoomCursorContainer = createContainer(\"zoom\", \"voronoi\");\n\n  return (\n    <div>\n      <VictoryChart domainPadding={{ y: 0 }} width={400} height={30}\n        theme={Theme}\n        padding={{ top: 5, bottom: 0, left: 25, right: 10 }}\n        containerComponent={\n          <VictoryBrushContainer\n            brushDimension=\"x\"\n            brushDomain={zoomDomain}\n            onBrushDomainChange={handleZoom}\n          />\n        }\n      >\n        <VictoryAxis style={{ axis: { strokeWidth: 0 } }} />\n        {\n          Object.keys(props.configuration.data).map((key, index) => {\n            return <VictoryLine\n              style={{ data: { stroke: Theme.colors[index] } }}\n              data={props.configuration.data[key]}\n              x={0}\n              y={1}\n              key={\"seriesBrush\" + key}\n              interpolation={'stepAfter'}\n            />\n          })\n        }\n\n      </VictoryChart>\n\n      <VictoryChart\n        theme={Theme}\n        domainPadding={{ y: 10 }} width={400} height={200}\n        padding={{ top: 40, bottom: 30, left: 25, right: 10 }}\n        containerComponent={\n          <VictoryZoomCursorContainer\n            allowZoom={false}\n            allowPan={true}\n            zoomDimension={\"x\"}\n            zoomDomain={zoomDomain}\n            onZoomDomainChange={handleZoom}\n            cursorDimension={\"x\"}\n            labels={({ datum }) => `${datum[0]}`}\n          />\n        }\n      >\n        <VictoryLegend x={100} y={175}\n          centerTitle\n          orientation=\"horizontal\"\n          gutter={20}\n          style={{ background: \"black\", border: { stroke: \"black\" }, title: { fontSize: 12 } }}\n          data={Object.keys(props.configuration.data).map((key, index) => {\n            return { name: key, symbol: { fill: Theme.colors[index], type: \"circle\" } }\n          })}\n        />\n        <VictoryAxis\n          orientation={\"top\"}\n          offsetY={30}\n\n        />\n        {Object.keys(props.configuration.data).map((key, index) => {\n          return <VictoryLine\n            style={{ data: { stroke: Theme.colors[index] } }}\n            data={props.configuration.data[key]}\n            x={0}\n            y={1}\n            key={\"series\" + key}\n            interpolation={'stepAfter'}\n            name={key}\n          />\n        })}\n\n      </VictoryChart>\n    </div>\n  )\n}\n\nexport default Logic\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Histogram.js",["230","231","232","233","234","235","236","237","238","239","240"],"import React from 'react'\nimport { Card, Button } from 'react-bootstrap'\nimport { Chart } from 'react-charts'\nimport { Line, Scatter } from 'react-chartjs-2'\nimport { VictoryChart, VictoryZoomContainer, VictoryLine, VictorHistogram, VictoryHistogram } from \"victory\";\n\nimport Theme from './Theme'\n\n\nconst Histogram = props => {\n\n  const [count, setCount] = React.useState(0)\n\n  const temperatureData =\n    [\n      { x: 20 },\n      { x: 21 },\n      { x: 22 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 23 },\n      { x: 24 },\n      { x: 24 },\n      { x: 24 },\n      { x: 24 },\n      { x: 24 },\n      { x: 25 },\n      { x: 25 },\n      { x: 25 },\n      { x: 24 },\n      { x: 23 },\n      { x: 19 },\n      { x: 15 },\n      { x: 16 },\n      { x: 14 },\n      { x: 27 },\n      { x: 27 },\n      { x: 27 },\n      { x: 16 },\n      { x: 30 },\n      { x: 14 }\n    ];\n\n\n  return (\n    <VictoryChart\n      theme={Theme}\n      height={250}\n    >\n      { Object.keys(props.configuration.data).map((key, index) => {\n        return (\n          <VictoryHistogram\n            data={props.configuration.data[key]}\n            key={key}\n            x={1}\n          />\n        )\n      })}\n\n\n\n    </VictoryChart>\n  )\n}\n\nexport default Histogram\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Log.js",["241","242","243"],"import React from 'react'\nimport { Button, Card, Badge } from 'react-bootstrap'\n\nconst LogEntry = props => {\n  var variant;\n  var label;\n  if (props.type === \"debug\") {\n    variant = \"dark\"\n  } else if (props.type === \"info\") {\n    variant = \"info\"\n  } else if (props.type === \"warning\") {\n    variant = \"warning\"\n  } else if (props.type === \"error\") {\n    variant = \"danger\"\n  } else {\n    variant = \"primary\"\n  }\n\n  return (\n    <li>\n      timestamp: {props.text} <Badge pill variant={variant} className=\"float-right\">{props.type}</Badge> \n    </li>\n  )\n}\n\nconst Log = props => {\n  return (\n    <div>\n        <ul>\n          <LogEntry type=\"debug\" text=\"Hello\" />\n          <LogEntry type=\"info\" text=\"World\" />\n          <LogEntry type=\"warning\" text=\"Uh oh\" />\n          <LogEntry type=\"error\" text=\"An error happened\" />\n        </ul>\n    </div>\n  )\n}\n\nexport default Log\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/insights/Theme.js",["244"],"import { assign } from \"lodash\";\n\n// *\n// * Colors\n// *\nconst yellow200 = \"#FFF59D\";\nconst deepOrange600 = \"#F4511E\";\nconst lime300 = \"#DCE775\";\nconst lightGreen500 = \"#8BC34A\";\nconst teal700 = \"#00796B\";\nconst cyan900 = \"#006064\";\nconst blueGrey50 = \"#ECEFF1\";\nconst blueGrey300 = \"#90A4AE\";\nconst blueGrey700 = \"#455A64\";\nconst grey900 = \"#212121\";\nconst colors = [deepOrange600, blueGrey300, lime300, lightGreen500, teal700, cyan900, yellow200];\n// *\n// * Typography\n// *\nconst sansSerif = \"'Helvetica Neue', 'Helvetica', sans-serif\";\nconst letterSpacing = \"normal\";\nconst fontSize = 12;\n// *\n// * Layout\n// *\nconst padding = 8;\nconst baseProps = {\n  width: 500,\n  height: 100,\n  padding: { top: 5, bottom: 25, left: 25, right: 10}\n};\n// *\n// * Labels\n// *\nconst baseLabelStyles = {\n  fontFamily: sansSerif,\n  fontSize:fontSize,\n  letterSpacing:letterSpacing,\n  padding: 1,\n  fill: blueGrey700,\n  stroke: \"transparent\",\n  strokeWidth: 0\n};\n\nconst centeredLabelStyles = assign({ textAnchor: \"middle\" }, baseLabelStyles);\n// *\n// * Strokes\n// *\nconst strokeDasharray = \"10, 5\";\nconst strokeLinecap = \"round\";\nconst strokeLinejoin = \"round\";\n\nexport default {\n  colors: colors,\n  area: assign(\n    {\n      style: {\n        data: {\n          fill: grey900\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  axis: assign(\n    {\n      style: {\n        axis: {\n          fill: \"transparent\",\n          stroke: blueGrey300,\n          strokeWidth: 2,\n          strokeLinecap,\n          strokeLinejoin\n        },\n        axisLabel: assign({}, centeredLabelStyles, {\n          padding,\n          stroke: \"transparent\"\n        }),\n        grid: {\n          fill: \"none\",\n          stroke: \"transparent\",\n          strokeDasharray,\n          strokeLinecap,\n          strokeLinejoin,\n          pointerEvents: \"painted\"\n        },\n        ticks: {\n          fill: \"transparent\",\n          size: 5,\n          stroke: blueGrey300,\n          strokeWidth: 1,\n          strokeLinecap,\n          strokeLinejoin\n        },\n        tickLabels: assign({}, baseLabelStyles, {\n          fill: blueGrey700\n        })\n      }\n    },\n    baseProps\n  ),\n  polarDependentAxis: assign({\n    style: {\n      ticks: {\n        fill: \"transparent\",\n        size: 1,\n        stroke: \"transparent\"\n      }\n    }\n  }),\n  bar: assign(\n    {\n      style: {\n        data: {\n          fill: blueGrey700,\n          padding,\n          strokeWidth: 0\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  boxplot: assign(\n    {\n      style: {\n        max: { padding, stroke: blueGrey700, strokeWidth: 1 },\n        maxLabels: assign({}, baseLabelStyles, { padding: 3 }),\n        median: { padding, stroke: blueGrey700, strokeWidth: 1 },\n        medianLabels: assign({}, baseLabelStyles, { padding: 3 }),\n        min: { padding, stroke: blueGrey700, strokeWidth: 1 },\n        minLabels: assign({}, baseLabelStyles, { padding: 3 }),\n        q1: { padding, fill: blueGrey700 },\n        q1Labels: assign({}, baseLabelStyles, { padding: 3 }),\n        q3: { padding, fill: blueGrey700 },\n        q3Labels: assign({}, baseLabelStyles, { padding: 3 })\n      },\n      boxWidth: 20\n    },\n    baseProps\n  ),\n  candlestick: assign(\n    {\n      style: {\n        data: {\n          stroke: blueGrey700\n        },\n        labels: assign({}, baseLabelStyles, { padding: 5 })\n      },\n      candleColors: {\n        positive: \"#ffffff\",\n        negative: blueGrey700\n      }\n    },\n    baseProps\n  ),\n  chart: baseProps,\n  errorbar: assign(\n    {\n      borderWidth: 8,\n      style: {\n        data: {\n          fill: \"transparent\",\n          opacity: 1,\n          stroke: blueGrey700,\n          strokeWidth: 2\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  group: assign(\n    {\n      colorScale: colors\n    },\n    baseProps\n  ),\n  histogram: assign(\n    {\n      style: {\n        data: {\n          fill: blueGrey700,\n          stroke: grey900,\n          strokeWidth: 2\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  legend: {\n    colorScale: colors,\n    gutter: 10,\n    orientation: \"vertical\",\n    titleOrientation: \"top\",\n    style: {\n      data: {\n        type: \"circle\"\n      },\n      labels: baseLabelStyles,\n      title: assign({}, baseLabelStyles, { padding: 5 })\n    }\n  },\n  line: assign(\n    {\n      style: {\n        data: {\n          fill: \"transparent\",\n          opacity: 1,\n          stroke: blueGrey700,\n          strokeWidth: 1\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  pie: assign(\n    {\n      colorScale: colors,\n      style: {\n        data: {\n          padding,\n          stroke: blueGrey50,\n          strokeWidth: 1\n        },\n        labels: assign({}, baseLabelStyles, { padding: 20 })\n      }\n    },\n    baseProps\n  ),\n  scatter: assign(\n    {\n      style: {\n        data: {\n          fill: blueGrey700,\n          opacity: 1,\n          stroke: \"transparent\",\n          strokeWidth: 0\n        },\n        labels: baseLabelStyles\n      }\n    },\n    baseProps\n  ),\n  stack: assign(\n    {\n      colorScale: colors\n    },\n    baseProps\n  ),\n  tooltip: {\n    style: assign({}, baseLabelStyles, { padding: 0, pointerEvents: \"none\" }),\n    flyoutStyle: {\n      stroke: grey900,\n      strokeWidth: 1,\n      fill: \"#f0f0f0\",\n      pointerEvents: \"none\"\n    },\n    flyoutPadding: 5,\n    cornerRadius: 5,\n    pointerLength: 10\n  },\n  voronoi: assign(\n    {\n      style: {\n        data: {\n          fill: \"transparent\",\n          stroke: \"transparent\",\n          strokeWidth: 0\n        },\n        labels: assign({}, baseLabelStyles, { padding: 5, pointerEvents: \"none\" }),\n        flyout: {\n          stroke: grey900,\n          strokeWidth: 1,\n          fill: \"#f0f0f0\",\n          pointerEvents: \"none\"\n        }\n      }\n    },\n    baseProps\n  )\n};\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Debug.js",["245","246"],"import React from 'react'\nimport { Button, Col, ListGroup, Row, Badge } from 'react-bootstrap'\n\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport {\n  faTerminal,\n  faHistory,\n  faChartArea,\n  faMicrochip,\n  faHandPaper,\n  faShoePrints,\n  faTimes,\n  faRunning\n} from '@fortawesome/free-solid-svg-icons'\n\nimport AppContainer from '../components/AppContainer'\n\n\nconst Debug = props => {\n\n  const buttonClass =\"mr-2 btn\"\n\n  function onTerminalClicked(){\n    props.setPage(\"Terminal\")\n  }\n\n  function onInsightsClicked(){\n    props.setPage(\"Insights\")\n  }\n\n  const state  = {\n    pc: 0x08000000,\n    r0: 1000,\n    r1: 2000,\n    r2: 3000,\n    r3: 4000,\n    r4: 5000,\n    r5: 6000,\n    r6: 7000,\n    r7: 8000,\n    r8: 9000,\n  }\n\n\n  function pad(num, size, base) {\n    num = num.toString(base);\n    while (num.length < size) num = \"0\" + num;\n    return num;\n}\n\n\n  return (\n    <AppContainer>\n    <Row className=\"mb-3\">\n      <Col>\n      <Button className={buttonClass} variant=\"success\" ><FA icon={faTerminal} onClick={onTerminalClicked} /> Connect</Button>\n      <Button className={buttonClass}><FA icon={faRunning} onClick={onInsightsClicked} /> Run</Button>\n      <Button className={buttonClass}><FA icon={faHandPaper} onClick={onInsightsClicked} /> Halt</Button>\n      <Button className={buttonClass}><FA icon={faShoePrints} onClick={onInsightsClicked} /> Step</Button>\n      <Button className={buttonClass}><FA icon={faChartArea} onClick={onInsightsClicked} /> Resume</Button>\n      <Button className={buttonClass} variant=\"danger\"><FA icon={faTimes} onClick={onInsightsClicked} /> Abort</Button>\n      </Col>\n      </Row>\n      <h4><FA icon={faMicrochip} /> Core State</h4>\n      <Row>\n      <Col md={8}>\n      <ListGroup>\n        {Object.keys(state).map((key, index) => {\n            return <ListGroup.Item><strong>{key}:</strong> {`${pad(state[key],8,16)}h / ${state[key]}d` }</ListGroup.Item>\n          })}\n      </ListGroup>\n      </Col>\n    </Row>\n  </AppContainer>\n  )\n}\n\nexport default Debug\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Flash.js",["247","248","249","250","251","252","253","254","255","256","257"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Trace.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Settings.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Property.js",["258"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Bitrate.js",["259","260","261"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\nimport TextInput from './TextInput'\n\nconst Bitrate = props => {\n\n\n  return (\n    <TextInput \n    name=\"Bitrate\" \n    placeholder={props.placeholder !== undefined ? props.placeholder : \"1000000\"} \n    description=\"Bitrate in bits/second\" \n    onChange={props.onChange}\n    value={props.value} />\n  )\n}\n\nexport default Bitrate\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Boolean.js",["262","263"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\nconst Bitrate = props => {\n\n  return (\n  <Form.Group controlId=\"formBasicCheckbox\">\n    <Form.Check \n    type=\"checkbox\" \n    label={props.name} \n    defaultChecked={props.value}\n    onChange={(e) => props.toggleValue()}\n     />\n    <Form.Text className=\"text-muted\">\n      {props.children}\n    </Form.Text>\n  </Form.Group>\n  )\n}\n\nexport default Bitrate\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/Delegate.js",["264"],"import React from 'react'\nimport { Form } from 'react-bootstrap'\n\nimport LoadingSpinner from '../LoadingSpinner'\n\n\nconst Delegate = props => {\n\n  console.log(`delegate options ${JSON.stringify(props.options)}`)\n\n  return (\n    <Form.Group controlId=\"formBasicCheckbox\">\n      <Form.Label>Delegate (interface/family)</Form.Label>\n      { Object.keys(props.options).map((key, index) => {\n        return <Form.Check\n        type=\"radio\"\n        label={`${props.options[key].interface}/${props.options[key].family}`}\n        key={key}\n      />\n      })}\n\n      <Form.Text className=\"text-muted\">\n        Select the delegate to use.\n    </Form.Text>\n    </Form.Group>\n  )\n}\n\nexport default Delegate\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/QuickStart.js",["265","266"],"import React from 'react'\nimport { Container, Alert, Row, Button } from 'react-bootstrap'\n\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport {\n  faSlidersH,\n  faCopy,\n  faExternalLinkAlt\n} from '@fortawesome/free-solid-svg-icons'\n\nimport Section from '../components/docs/Section'\nimport InternalJump from '../components/docs/InternalJump'\n\nconst QuickStart = props => {\n\n\n  const intro = `## Getting Started\n\nCongratulations! If you are reading this, you have successfully connected your Stratify Toolbox to the Wifi and loaded the web app.\nNow you can:\n\n- Flash\n- Trace\n- Debug\n\nBefore you get started with any of that, you will want to understand what a delegates are.\n\n`\n  const delegateIntro = `## Delegates`\n\n  const delegate = `A delegate is a program that runs on the Toolbox to provide a *function* (flash/trace/debug) over\nan *interface* for an MCU *family*. Before you can do anything exciting, you need to setup your delegate\nin the settings.\n`\n\n\n  const flashIntro = `## Flash and Trace\nThe primary use of the Toolbox is to rapidly flash and trace MCU programs.\n\nOnce you sort out the settings, you can flash the target by posting the \\`elf\\` file to the Toolbox.\n\n`\n\nconst flashCurlCommand = `\n\\`\\`\\`\ncurl -X POST --data-binary @path/to/firmware.elf http://<local ip address>/flash/program/elf\n\\`\\`\\`\n\nYou can bake that command right into your build system target. If the web app is open, it will automatically \nstart streaming the \\`trace\\` output. Otherwise, you can view the \\`trace\\` output using \\`curl\\`.\n\n\\`\\`\\`\ncurl http://<local ip address>/trace\n\\`\\`\\`\n\n`\n\n  return (\n    <Container className=\"mb-3\">\n      <Section markdown={intro} />\n      <Section markdown={delegateIntro} />\n      <Section markdown={delegate} >\n        <InternalJump page=\"Settings\" setPage={props.setPage} message=\"Configure delegate in Settings\" icon={faSlidersH} />\n      </Section>\n      <Section markdown={flashIntro} />\n      <Section markdown={flashCurlCommand}>\n        <Row>\n        <Button className=\"mb-2 btn-block text-left\" variant='success'>Copy curl command with IP address <FA className=\"float-right\" icon={faCopy} /></Button>\n        </Row>\n      </Section>\n    </Container>\n  )\n}\n\nexport default QuickStart\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/About.js",["267"],"import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\n\nimport Section from '../components/docs/Section'\n\nconst About = props => {\n\n\n  const overview = `# Stratify Toolbox\n\nCopyright 2021. Stratify Labs, Inc. See LICENSE.md for more information.\n`\n\n  const credits = `## Credits\n\nSpecial Thanks to:\n\n- compiler-rt (clang)\n- newlib\n- gcc (building and compiling)\n- GCC C++ standard library\n- ARM DAP Link\n- LWIP\n- STM32 HAL Library\n- mbedtls\n- jansson JSON library\n- Stratify OS\n- Stratify C++ API Framework\n- Font Awesome Icons\n- Google Fonts\n` \n\n  return (\n    <Container className=\"mb-3\">\n    <Section markdown={overview} />\n    <Section markdown={credits} />\n    </Container>\n  )\n}\n\nexport default About\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Files.js",["268","269","270","271"],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/Section.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/views/Reference.js",["272","273"],"import React from 'react'\nimport { Container  } from 'react-bootstrap'\nimport {\n  faSlidersH,\n  faExternalLinkAlt,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport Section from '../components/docs/Section'\nimport InternalJump from '../components/docs/InternalJump'\nimport ExternalJump from '../components/docs/ExternalJump'\nimport GetRequest from '../components/docs/GetRequest'\nimport PostRequest from '../components/docs/PostRequest'\nimport PutRequest from '../components/docs/PutRequest'\nimport { NetworkContext } from '../contexts/NetworkContext'\n\n\nconst Reference = props => {\n\n  const network = React.useContext(NetworkContext);\n\n  const ipAddress = network.host;\n\n  const overview = `# Overview\n  \n## HTTP API\n\nThe Stratify Toolbox runs an HTTP server that listens for requests that allow you to access the flash, trace, and debug\ninterfaces either using this web application or from the command line using a program like \\`curl\\`.\n\nThe HTTP API consists of 4 parts:\n\n- Flash\n- Debug\n- Trace\n- Filesystem\n`\n\n  const delegate = `## Delegates\n\n  A delegate is a program specifically designed for a specific *interface* and MCU *family*.\nIt runs on the Toolbox and allows you to perform a *function* such as flash, debug, or trace an MCU *family* with a given *interface*.\n\nThe Toolbox hardware supports interfaces such as:\n\n- SWD\n- JTAG\n- UART\n- SPI\n- I2C\n- Anything that can be bitbanged\n\nThe Toolbox can be programmed to support any MCU *family* that can be either flashed, debugged, or traced\nusing an *interface* above. Each *function* has an independent delegate.\n\nThe built-in delegates are found at \\`/bin/io[function]_[interface]_[family]\\`. Delegates that\nare added to \\`/home/bin/io[function]_[interface]_[family]\\` are also recognized.\n`\n\n  const delegateExample = `\nFor example, the Toolbox comes with several built-in delegates:\n- \\`ioflash_swd_stm32\\`: Flash any STM32 chip over SWD\n- \\`iotrace_swo_tbox\\`: Trace any MCU over SWO using the \\`tbox\\` trace library\n- \\`iodebug_swd_stm32\\`: Debug any STM32 chip over SWD\n- \\`iotrace_uart_tbox\\`: Trace any MCU over UART using the \\`tbox\\` trace library\n`\n\n const sdk = `\n\n## SDK\n\nThe Toolbox's SDK allows you to build, install, and share applications that run on the toolbox. This includes three\nbasic kinds of applications\n\n- Delegates that implement an *interface* for an MCU *family*\n- System applications can be customized and replaced (don't worry you can always revert)\n- User applications that provide brand-new functionality on the Toolbox\n\n\n`\n\n  const flash = `## HTTP Flash API`\n  const flashGet = `### Flash GET Requests\n\\`GET /flash/delegates\\`\n\nReturns a JSON object with a list of the available flash delegates.\n\nThe flash API allows you to get and set the current flash settings as well as flash the target.\n\n\\`GET /flash/settings\\`\n\nReturns the current flash settings as JSON.\n\nTo see your current flash settings:\n\n\\`\\`\\`\ncurl ${network.host}/flash/settings\n\\`\\`\\`\n\n\\`GET /flash/program/fs/<path>\\`\n\nPrograms the target with a firmware binary stored on the Toolbox.\n\n\\`\\`\\`\ncurl -X GET -d @path/to/path.json ${network.host}/flash/program/fs/home/user/firmware.elf\n\\`\\`\\`\n\n`\nconst flashPut = `### Flash PUT Requests\n\n\\`PUT /flash/settings\\`\n\nUpdates the current flash settings by sending a JSON file that matches the format of\nthe file returned using \\`GET /flash/settings\\`.\n\n\\`\\`\\`\ncurl -X PUT -d @path/to/settings.json ${network.host}/flash/settings\n\\`\\`\\`\n\n`\nconst flashPost = `### Flash POST Requests\n\n\\`POST /flash/program/[elf|bin]\\`\n\nReceives a firmware image (in \\`elf\\` or \\`bin\\` format) and programs it on the target and starts running and tracing\nthe output.\n\n\\`\\`\\`\n# ELF source file\ncurl -X POST -d @path/to/firmware.elf ${network.host}/flash/program/elf\n# Bin source file (settings need to specify start address)\ncurl -X POST -d @path/to/firmware.bin ${network.host}/flash/program/bin\n\\`\\`\\`\n\nThe image is stored on the SD card at \\`/home/flash/image/latest.[elf|bin]\\`. Rather\nthan overwrite the previous firmware, the Toolbox renames the previous firmware file\nusing a timestamp notation. Only the 100 most recent images are kept. You can use\nthe filesystem API to see which files are available as well as save copies of\nolder versions.\n\n`\n\n  const trace = `## HTTP Trace API\n\nThe trace API allows you to get and set the current trace settings as well as reset the target and trace the output.\n\n`\n  const traceGet = `### Trace GET Requests\n  \n\\`GET /trace/delegates\\`\n\nReturns a JSON object with a list of the available trace delegates.\n\n\\`GET /trace/settings\\`\n  \nReturns the current trace settings as JSON.\n    \n\\`\\`\\`\ncurl ${network.host}/trace/settings\n\\`\\`\\` \n\n\\`GET /trace\\`\n\nStarts streaming the trace data. If the HTTP request header specifies server-side\nevents, the response will for formatted as server-side events and encapsulated as\nJSON. The stream will stay open until it is closed by the client.\n\n\\`GET /trace/reset\\`\n\nSame as \\`GET /trace\\` but will reset the device before tracing starts.\n  \n`\n  const tracePut = `### Trace PUT Requests\n  \n  \\`PUT /trace/settings\\`\n  \nUpdates the current trace settings by sending a JSON file that matches the format of\nthe file returned using \\`GET /trace/settings\\`.\n  \n\\`\\`\\`\ncurl -X PUT -d @path/to/settings.json ${network.host}/trace/settings\n\\`\\`\\`\n\nStarts streaming the trace data just like the \\`GET\\` request but allows you\nto reset the device before starting the trace.\n`\n\n  const debug = `## HTTP Debug API\n\nThe debug API allows you to get and set the current debug settings as well as halt/run/step/resume and so on.\n\n`\n  const debugGet = `### Debug GET Requests\n  \n\\`GET /debug/delegates\\`\n\nReturns a JSON object with a list of the available debug delegates.\n\n\\`GET /debug/settings\\`\n    \nReturns the current trace settings as JSON.\n      \n\\`\\`\\`\ncurl ${network.host}/debug/settings\n\\`\\`\\` \n\nThe following HTTP GET requests perform various debugging functions. The response is a core dump in\nJSON format.\n\n- \\`GET /debug/start\\`\n- \\`GET /debug/halt\\`\n- \\`GET /debug/step\\`\n- \\`GET /debug/reset\\`\n\nThese just do what you think they do, but respond with a simple \\`{ \"result\" : \"[success|failed]\" }\\` rather\nthan the full core dump.\n\n- \\`GET /debug/resume\\`\n- \\`GET /debug/run\\`\n\n\n\\`GET /debug/read/<address>/<size>\\`\n\nReads memory using the debug port. The \\`<address>\\` and \\`<size>\\`\ncan be specified in hexidecimal or decimal. Use the \\`0x\\` prefix to\nspecify a hex address.\n\n\\`\\`\\`\ncurl ${network.host}/debug/read/0x08000000/1024\n\\`\\`\\` \n\n    \n`\n  const debugPut = `### Debug PUT Requests\n  \n\\`PUT /debug/settings\\`\n    \nUpdates the current debug settings by sending a JSON file that matches the format of\nthe file returned using \\`GET /debug/settings\\`.\n\n`\n  const debugPost = `### Debug POST Requests\n    \n\\`\\`\\`\ncurl -X POST -d @path/to/settings.json ${network.host}/debug/settings\n\\`\\`\\`\n\n\n\\`POST /debug/write/<address>/\\`\n\nWrites data to the memory address space on the target device. The size\nis determined by the content length of the request. The data is interpreted\nas raw binary data.\n\n\\`\\`\\`\ncurl -X POST -d @path/to/register/values.bin ${network.host}/debug/write/0x00000000\n\\`\\`\\`\n  \n`\n  const fs = `## Filesystem Overview\n\nThe filesystem API allows you to access the filesystems on the Toolbox. The filesystems follow a\nconvention which dictates how the device operates.\n\n### Filesystem Conventions\n\nThe Toolbox's filesystem looks like this:\n\n- root\n  - app: internal RAM used for executing applications\n  - assets: read-only system assets (icons, fonts, the web app)\n  - bin: read-only system applications\n  - dev: device access\n  - home: SD Card\n    - flash: for flashing the target\n    - debug: for debugging the target\n    - trace: trace reports\n    - user: user files\n    - settings: user-modifiable system settings\n    - tmp: temporary files\n\nCopies of system files are kept in the read-only \\`/assets\\` and \\`/bin\\` folders.  Files in \\`/assets\\` and \\`/bin\\` \ncan be replaced by putting files of the same name in \\`/home/assets\\` and \\`/home/bin\\` respectively. \nFor example, the start screen is executed at \\`/bin/Home\\`. By creating an executable application and \nplacing it at \\`/home/bin/Home\\`, the Toolbox will load the user version rather than the system version. If you\nget into trouble, you can always remove the SD card and delete the files to restore standard operation.\n\nBy convention the delegates are stored on the Toolbox's filesystem at \\`/bin\\` (read-only) or \\`/home/bin\\` (read-write). \nThe delegate naming convention is:\n\n\\`\\`\\`\nio[function]_[interface]_[family]\n\\`\\`\\`\n\nSo the default STM32 SWD flash delegate is found at:\n\n\\`\\`\\`\n/bin/ioflash_swd_stm32\n\\`\\`\\`\n\nIf you want to replace this delegate with a user version, you can place it at:\n\n\\`\\`\\`\n/home/bin/ioflash_swd_stm32\n\\`\\`\\`\n\n## HTTP Filesystem API\n`\n  const fsGet = `### Filesystem GET Requests\n\n\\`GET /fs/<path>\\`\n\nGets the file or directory contents. If \\`path\\` is a directory, the response will include a JSON\nobject with the contents of the directory. If \\`path\\` is a file, the response will be the contents\nof the file.\n\n\\`\\`\\`\ncurl ${network.host}/fs/home/flash/image\n\\`\\`\\` \n\n`\n  const fsPost = `### Filesystem POST Requests\n\n\\`POST /fs/<path>\\`\n\nSends a file to the device to be saved at \\`path\\`. If the file\nalready exists, the operation will fail. Use \\`PUT\\` to create with \noverwrite capability.\n\n\\`\\`\\`\ncurl -X POST --data-binary @path/to/some.file ${network.host}/file/home/tmp/some.file\n\\`\\`\\`\n\n`\nconst fsPut = `### Filesystem PUT Requests\n\n\\`PUT /fs/<path>\\`\n\nSends a file to the device to be saved at \\`path\\`. \\`PUT\\` will overwrite\nthe file if it already exists.\n\n\\`\\`\\`\ncurl -X PUT --data-binary @path/to/some.file ${network.host}/file/home/tmp/some.file\n\\`\\`\\`\n\n`\n  const fsDelete = `### Filesystem Delete Requests\n\n\\`DELETE /fs/<path>\\`\n\nDeletes the file at \\`path\\`. Only files on the SD card (\\`/home\\`) can be deleted. You\ncannot create or delete directories using the HTTP API.\n\n\\`\\`\\`\ncurl -X DELETE ${network.host}/file/home/tmp/some.file\n\\`\\`\\`\n`\n\n  return (\n    <Container className=\"mb-3\">\n      <Section markdown={overview} ></Section>\n      <Section markdown={delegate} />\n      <Section markdown={delegateExample}>\n        \n      <InternalJump page=\"Settings\" setPage={props.setPage} message=\"Configure delegate in Settings\" icon={faSlidersH} />\n      <ExternalJump link=\"http://github.com/StratifyLabs/tbox\" message=\"tbox library on Github\" icon={faExternalLinkAlt} />\n        \n\n      </Section>\n      <Section markdown={flash} ></Section>\n      <Section markdown={flashGet} ><GetRequest placeholder='/flash'/></Section>\n      <Section markdown={flashPut} ><PutRequest placeholder='/flash'/></Section>\n      <Section markdown={flashPost} ><PostRequest placeholder='/flash'/></Section>\n      <Section markdown={trace} ></Section>\n      <Section markdown={traceGet} ><GetRequest placeholder='/trace'/></Section>\n      <Section markdown={tracePut} ><PutRequest placeholder='/trace'/></Section>\n      <Section markdown={debug} ></Section>\n      <Section markdown={debugGet} ><GetRequest placeholder='/debug'/></Section>\n      <Section markdown={debugPut} ><PutRequest placeholder='/debug'/></Section>\n      <Section markdown={debugPost} ><PostRequest placeholder='/debug'/></Section>\n      <Section markdown={fs} ></Section>\n      <Section markdown={fsGet} ><GetRequest placeholder='/fs'/></Section>\n      <Section markdown={fsPost} ><PostRequest placeholder='/fs'/></Section>\n      <Section markdown={fsPut} ><PutRequest placeholder='/fs'/></Section>\n      <Section markdown={fsDelete} ></Section>\n    </Container>\n  )\n}\n\nexport default Reference\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/InternalJump.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/ExternalJump.js",["274","275"],"import React from 'react'\nimport { Row, Button } from 'react-bootstrap'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\n\nconst ExternalJump = props => {\n\n\n  return (\n    <Row className=\"mt-3 mb-3\">\n      <a href={props.link} target=\"_blank\" className=\"mb-2 btn btn-block text-left btn-link\" >{props.message} <FA className=\"float-right\" icon={props.icon} /></a>\n    </Row>\n  )\n}\n\nexport default ExternalJump\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/GetRequest.js",["276"],"import React from 'react'\nimport { Alert, Card, Row, Col, Form, Button, Container, InputGroup, FormControl } from 'react-bootstrap'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport {\n  faCheck,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { NetworkContext } from '../../contexts/NetworkContext'\n\nconst GetRequest = props => {\n\n  const [path, setPath] = React.useState(\"\");\n  const [response, setResponse] = React.useState({});\n  const [responseStatus, setResponseStatus] = React.useState(false);\n\n  const network = React.useContext(NetworkContext);\n\n  console.log(JSON.stringify(network));\n\n  //use state to save the result\n  function sendRequest() {\n    console.log(`request ${path}`)\n    fetch(`${network.host}${path}`)\n      .then(response => response.json())\n      .then(result => {\n        setResponseStatus(true)\n        setResponse(result)\n      })\n  }\n\n  function abortRequest() {\n\n  }\n\n  return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Form>\n          <h5>GET Request</h5>\n          <InputGroup>\n            <FormControl\n              type=\"text\"\n              placeholder={props.placeholder}\n              aria-label=\"Input group example\"\n              aria-describedby=\"btnGroupAddon\"\n              defaultValue={props.server}\n              onChange={(e) => setPath(e.currentTarget.value)}\n            />\n            <InputGroup.Append>\n              <Button variant=\"success\" onClick={sendRequest}><FA icon={faCheck} /></Button>\n            </InputGroup.Append>\n            <InputGroup.Append>\n              <Button variant=\"danger\" onClick={abortRequest}><FA icon={faTimes} /></Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n      </Row >\n      <Row className=\"mt-3\">\n        <Col>\n        <Alert variant={responseStatus ? \"success\" : \"danger\"}>\n            <pre>{JSON.stringify(response, null, 2)}</pre>\n        </Alert>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default GetRequest\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/AppContainer.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/SettingsObject.js",["277"],"import React from 'react'\nimport { Form } from 'react-bootstrap'\n\nimport { NetworkContext } from '../../contexts/NetworkContext'\n\nimport FlashSettings from './FlashSettings'\nimport DebugSettings from './DebugSettings'\nimport TraceSettings from './TraceSettings'\nimport LoadingSpinner from '../LoadingSpinner'\n\nconst SettingsObject = props => {\n\n  const network = React.useContext(NetworkContext);\n  const [settings, setSettings] = React.useState();\n  const [delegateOptions, setDelegateOptions] = React.useState();\n  const [count, setCount] = React.useState();\n\n  //request current settings from the device -- update the settings on the device\n  //as they are changed here\n\n  const isReady = (settings !== undefined && delegateOptions !== undefined)\n\n  React.useEffect(() => {\n\n    console.log(\"Try to fetch \" + props.type);\n    fetch(`${network.host}/${props.type}/settings`)\n      .then(response => response.json())\n      .then(result => {\n        console.log(`fetched settings ${JSON.stringify(result)}`)\n        setSettings(result)\n        fetch(`${network.host}/${props.type}/delegates`)\n        .then(response => response.json())\n        .catch(err => {\n          console.log(err);\n          setCount(count+1)\n        })\n        .then(result => {\n          console.log(`fetched delegates ${JSON.stringify(result)}`)\n          setDelegateOptions(result)\n        })\n      })\n\n\n    return () => {\n      console.log(\"Need to put settings for \" + props.type);\n    }\n\n  }, [count])\n\n\n  return (\n    <Form>\n      { isReady === false && <LoadingSpinner /> }\n      { isReady && props.type === \"flash\" && <FlashSettings settings={settings} updateSettings={setSettings} delegateOptions={delegateOptions} /> }\n      { isReady && props.type === \"debug\" && <DebugSettings settings={settings} updateSettings={setSettings} delegateOptions={delegateOptions} /> }\n      { isReady && props.type === \"trace\" && <TraceSettings settings={settings} updateSettings={setSettings} delegateOptions={delegateOptions} />}\n      \n    </Form>\n  )\n}\n\nexport default SettingsObject\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/contexts/NetworkContext.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/TextInput.js",[],"/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/FlashSettings.js",["278","279","280","281","282"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\nimport SettingsObject from './SettingsObject'\nimport Delegate from './Delegate'\nimport Bitrate from './Bitrate'\nimport TextInput from './TextInput'\nimport Boolean from './Boolean'\n\nimport LoadingSpinner from '../LoadingSpinner'\n\n\nconst FlashSettings = props => {\n\n\n  function handleVerifyChanged() {\n    let settings = props.settings;\n    settings.verify = !props.settings.verify;\n    props.updateSettings(settings);\n  }\n\n  function handleForceChanged() {\n    let settings = props.settings;\n    settings.force = !props.settings.force;\n    props.updateSettings(settings);\n  }\n\n  function handleStartChanged(value) {\n    let settings = props.settings;\n    settings.start = value;\n    props.updateSettings(settings);\n  }\n\n  function handleBitrateChanged(value) {\n    let settings = props.settings;\n    settings.bitrate = value;\n    props.updateSettings(settings);\n  }\n\n  //request current settings from the device -- update the settings on the device\n  //as they are changed here\n\n  return (\n    <div>\n      <Delegate options={props.delegateOptions} />\n      <Bitrate\n        value={props.settings.bitrate}\n        placeholder=\"1000000\"\n        onChange={(value) => handleBitrateChanged(value)} />\n      <TextInput\n        name=\"Start\"\n        placeholder=\"0x00000000\"\n        value={props.settings.start}\n        onChange={(value) => handleStartChanged(value)}\n        description=\"Start address for .bin files\" />\n      <Boolean\n        name=\"Verify\"\n        toggleValue={() => handleVerifyChanged()}\n        value={props.settings.verify}>Verify the image was installed correctly</Boolean>\n      <Boolean\n        name=\"Force\"\n        toggleValue={() => handleForceChanged()}\n        value={props.settings.force}>Force install even if the image is already installed</Boolean>\n    </div>\n  )\n}\n\nexport default FlashSettings\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/DebugSettings.js",["283","284","285"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\nimport Delegate from './Delegate'\nimport Bitrate from './Bitrate'\nimport Boolean from './Boolean'\n\nconst DebugSettings = props => {\n\n  function handleHardwareResetChanged() {\n    let settings = props.settings;\n    settings.hardwareReset = !props.settings.hardwareReset;\n    props.updateSettings(settings);\n  }\n\n  function handleConnectUnderResetChanged() {\n    let settings = props.settings;\n    settings.connectUnderReset = !props.settings.connectUnderReset;\n    props.updateSettings(settings);\n  }\n\n  function handleBitrateChanged(value) {\n    let settings = props.settings;\n    settings.bitrate = value;\n    props.updateSettings(settings);\n  }\n\n  return (\n    <div>\n        <Delegate options={props.delegateOptions} />\n        <Bitrate\n        value={props.settings.bitrate}\n        placeholder=\"1000000\"\n        onChange={(value) => handleBitrateChanged(value)} />\n\n      <Boolean\n        name=\"Hardware Reset\"\n        toggleValue={() => handleHardwareResetChanged()}\n        value={props.settings.hardwareReset}>Use the hardware signal to reset the device (recommended if available)</Boolean>\n\n      <Boolean\n        name=\"Connect Under Reset\"\n        toggleValue={() => handleConnectUnderResetChanged()}\n        value={props.settings.connectUnderReset}>Connect to debug port while unit us under reset (recommended)</Boolean>\n\n    </div>\n  )\n}\n\nexport default DebugSettings\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/settings/TraceSettings.js",["286","287","288","289"],"import React from 'react'\nimport { Card, Form, Button } from 'react-bootstrap'\n\nimport Delegate from './Delegate'\nimport Bitrate from './Bitrate'\nimport Boolean from './Boolean'\n\nconst TraceSettings = props => {\n\n\n  function handleBitrateChanged(value) {\n    let settings = props.settings;\n    settings.bitrate = value;\n    props.updateSettings(settings);\n  }\n\n  return (\n    <div>\n      <Delegate options={props.delegateOptions} />\n\n      <Bitrate\n        value={props.settings.bitrate}\n        placeholder=\"1000000\"\n        onChange={(value) => handleBitrateChanged(value)} />\n    </div>\n  )\n}\n\nexport default TraceSettings\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/LoadingSpinner.js",["290"],"import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\n\n\nconst LoadingSpinner = props => {\n\n  return (\n    <FA icon={faSpinner} spin size={props.size !== undefined ? props.size : \"2x\"} />\n  )\n}\n\nexport default LoadingSpinner\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/PostRequest.js",["291"],"import React from 'react'\nimport { Alert, Card, Row, Col, Form, Button, Container, InputGroup, FormControl } from 'react-bootstrap'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport {\n  faCheck,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { NetworkContext } from '../../contexts/NetworkContext'\n\nconst PostRequest = props => {\n\n  const [path, setPath] = React.useState(\"\");\n  const [response, setResponse] = React.useState({});\n  const [responseStatus, setResponseStatus] = React.useState(false);\n\n  const network = React.useContext(NetworkContext);\n\n  console.log(JSON.stringify(network));\n\n  //use state to save the result\n  function sendRequest() {\n    console.log(`request ${path}`)\n    fetch(`${network.host}${path}`)\n      .then(response => response.json())\n      .then(result => {\n        setResponseStatus(true)\n        setResponse(result)\n      })\n  }\n\n  function abortRequest() {\n\n  }\n\n  return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Form>\n          <h5>POST Request</h5>\n          <InputGroup>\n            <FormControl\n              type=\"text\"\n              placeholder={props.placeholder}\n              aria-label=\"Input group example\"\n              aria-describedby=\"btnGroupAddon\"\n              defaultValue={props.server}\n              onChange={(e) => setPath(e.currentTarget.value)}\n            />\n            <InputGroup.Append>\n              <Button variant=\"success\" onClick={sendRequest}><FA icon={faCheck} /></Button>\n            </InputGroup.Append>\n            <InputGroup.Append>\n              <Button variant=\"danger\" onClick={abortRequest}><FA icon={faTimes} /></Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n      </Row >\n      <Row className=\"mt-3\">\n        <Col>\n        <Alert variant={responseStatus ? \"success\" : \"danger\"}>\n            <pre>{JSON.stringify(response, null, 2)}</pre>\n        </Alert>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default PostRequest\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/docs/PutRequest.js",["292"],"import React from 'react'\nimport { Alert, Card, Row, Col, Form, Button, Container, InputGroup, FormControl } from 'react-bootstrap'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\nimport {\n  faCheck,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { NetworkContext } from '../../contexts/NetworkContext'\n\nconst PutRequest = props => {\n\n  const [path, setPath] = React.useState(\"\");\n  const [response, setResponse] = React.useState({});\n  const [responseStatus, setResponseStatus] = React.useState(false);\n\n  const network = React.useContext(NetworkContext);\n\n  console.log(JSON.stringify(network));\n\n  //use state to save the result\n  function sendRequest() {\n    console.log(`request ${path}`)\n    fetch(`${network.host}${path}`)\n      .then(response => response.json())\n      .then(result => {\n        setResponseStatus(true)\n        setResponse(result)\n      })\n  }\n\n  function abortRequest() {\n\n  }\n\n  return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Form>\n          <h5>PUT Request</h5>\n          <InputGroup>\n            <FormControl\n              type=\"text\"\n              placeholder={props.placeholder}\n              aria-label=\"Input group example\"\n              aria-describedby=\"btnGroupAddon\"\n              defaultValue={props.server}\n              onChange={(e) => setPath(e.currentTarget.value)}\n            />\n            <InputGroup.Append>\n              <Button variant=\"success\" onClick={sendRequest}><FA icon={faCheck} /></Button>\n            </InputGroup.Append>\n            <InputGroup.Append>\n              <Button variant=\"danger\" onClick={abortRequest}><FA icon={faTimes} /></Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n      </Row >\n      <Row className=\"mt-3\">\n        <Col>\n        <Alert variant={responseStatus ? \"success\" : \"danger\"}>\n            <pre>{JSON.stringify(response, null, 2)}</pre>\n        </Alert>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default PutRequest\n","/Users/tgil/gitv4/ToolboxWebApp/toolbox-web-app/src/components/UserFileUpload.js",[],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":2,"column":18,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"297","severity":1,"message":"301","line":2,"column":23,"nodeType":"299","messageId":"300","endLine":2,"endColumn":34},{"ruleId":"297","severity":1,"message":"302","line":2,"column":36,"nodeType":"299","messageId":"300","endLine":2,"endColumn":40},{"ruleId":"297","severity":1,"message":"303","line":2,"column":42,"nodeType":"299","messageId":"300","endLine":2,"endColumn":53},{"ruleId":"297","severity":1,"message":"304","line":2,"column":63,"nodeType":"299","messageId":"300","endLine":2,"endColumn":74},{"ruleId":"297","severity":1,"message":"305","line":2,"column":76,"nodeType":"299","messageId":"300","endLine":2,"endColumn":81},{"ruleId":"306","severity":1,"message":"307","line":11,"column":53,"nodeType":"308","endLine":11,"endColumn":95},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"310","line":8,"column":10,"nodeType":"299","messageId":"300","endLine":8,"endColumn":15},{"ruleId":"297","severity":1,"message":"311","line":8,"column":17,"nodeType":"299","messageId":"300","endLine":8,"endColumn":25},{"ruleId":"312","severity":1,"message":"313","line":21,"column":89,"nodeType":"314","messageId":"315","endLine":21,"endColumn":91},{"ruleId":"316","severity":1,"message":"317","line":11,"column":5,"nodeType":"318","endLine":11,"endColumn":14,"suggestions":"319"},{"ruleId":"297","severity":1,"message":"320","line":9,"column":20,"nodeType":"299","messageId":"300","endLine":9,"endColumn":31},{"ruleId":"297","severity":1,"message":"321","line":16,"column":9,"nodeType":"299","messageId":"300","endLine":16,"endColumn":21},{"ruleId":"297","severity":1,"message":"322","line":17,"column":9,"nodeType":"299","messageId":"300","endLine":17,"endColumn":24},{"ruleId":"316","severity":1,"message":"323","line":130,"column":6,"nodeType":"318","endLine":130,"endColumn":16,"suggestions":"324"},{"ruleId":"325","severity":1,"message":"326","line":19,"column":5,"nodeType":"327","messageId":"328","endLine":30,"endColumn":6},{"ruleId":"325","severity":1,"message":"326","line":14,"column":5,"nodeType":"327","messageId":"328","endLine":25,"endColumn":6},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"329","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":22},{"ruleId":"297","severity":1,"message":"330","line":3,"column":10,"nodeType":"299","messageId":"300","endLine":3,"endColumn":15},{"ruleId":"297","severity":1,"message":"331","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":14},{"ruleId":"297","severity":1,"message":"332","line":4,"column":16,"nodeType":"299","messageId":"300","endLine":4,"endColumn":23},{"ruleId":"297","severity":1,"message":"333","line":5,"column":24,"nodeType":"299","messageId":"300","endLine":5,"endColumn":44},{"ruleId":"297","severity":1,"message":"334","line":5,"column":59,"nodeType":"299","messageId":"300","endLine":5,"endColumn":73},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"329","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":22},{"ruleId":"297","severity":1,"message":"330","line":3,"column":10,"nodeType":"299","messageId":"300","endLine":3,"endColumn":15},{"ruleId":"297","severity":1,"message":"331","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":14},{"ruleId":"297","severity":1,"message":"332","line":4,"column":16,"nodeType":"299","messageId":"300","endLine":4,"endColumn":23},{"ruleId":"297","severity":1,"message":"333","line":8,"column":3,"nodeType":"299","messageId":"300","endLine":8,"endColumn":23},{"ruleId":"297","severity":1,"message":"335","line":9,"column":3,"nodeType":"299","messageId":"300","endLine":9,"endColumn":25},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"329","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":22},{"ruleId":"297","severity":1,"message":"330","line":3,"column":10,"nodeType":"299","messageId":"300","endLine":3,"endColumn":15},{"ruleId":"297","severity":1,"message":"331","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":14},{"ruleId":"297","severity":1,"message":"332","line":4,"column":16,"nodeType":"299","messageId":"300","endLine":4,"endColumn":23},{"ruleId":"297","severity":1,"message":"333","line":5,"column":24,"nodeType":"299","messageId":"300","endLine":5,"endColumn":44},{"ruleId":"297","severity":1,"message":"336","line":5,"column":46,"nodeType":"299","messageId":"300","endLine":5,"endColumn":57},{"ruleId":"297","severity":1,"message":"337","line":5,"column":59,"nodeType":"299","messageId":"300","endLine":5,"endColumn":74},{"ruleId":"297","severity":1,"message":"338","line":12,"column":10,"nodeType":"299","messageId":"300","endLine":12,"endColumn":15},{"ruleId":"297","severity":1,"message":"339","line":12,"column":17,"nodeType":"299","messageId":"300","endLine":12,"endColumn":25},{"ruleId":"297","severity":1,"message":"340","line":14,"column":9,"nodeType":"299","messageId":"300","endLine":14,"endColumn":24},{"ruleId":"297","severity":1,"message":"329","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":16},{"ruleId":"297","severity":1,"message":"309","line":2,"column":18,"nodeType":"299","messageId":"300","endLine":2,"endColumn":22},{"ruleId":"297","severity":1,"message":"341","line":6,"column":7,"nodeType":"299","messageId":"300","endLine":6,"endColumn":12},{"ruleId":"342","severity":1,"message":"343","line":53,"column":1,"nodeType":"344","endLine":285,"endColumn":3},{"ruleId":"297","severity":1,"message":"305","line":2,"column":39,"nodeType":"299","messageId":"300","endLine":2,"endColumn":44},{"ruleId":"297","severity":1,"message":"345","line":7,"column":3,"nodeType":"299","messageId":"300","endLine":7,"endColumn":12},{"ruleId":"297","severity":1,"message":"302","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"329","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":22},{"ruleId":"297","severity":1,"message":"309","line":2,"column":61,"nodeType":"299","messageId":"300","endLine":2,"endColumn":65},{"ruleId":"297","severity":1,"message":"346","line":4,"column":8,"nodeType":"299","messageId":"300","endLine":4,"endColumn":16},{"ruleId":"297","severity":1,"message":"347","line":10,"column":3,"nodeType":"299","messageId":"300","endLine":10,"endColumn":11},{"ruleId":"297","severity":1,"message":"348","line":29,"column":11,"nodeType":"299","messageId":"300","endLine":29,"endColumn":23},{"ruleId":"297","severity":1,"message":"349","line":29,"column":25,"nodeType":"299","messageId":"300","endLine":29,"endColumn":38},{"ruleId":"297","severity":1,"message":"350","line":29,"column":40,"nodeType":"299","messageId":"300","endLine":29,"endColumn":52},{"ruleId":"297","severity":1,"message":"351","line":39,"column":12,"nodeType":"299","messageId":"300","endLine":39,"endColumn":27},{"ruleId":"312","severity":1,"message":"313","line":66,"column":20,"nodeType":"314","messageId":"315","endLine":66,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":75,"column":20,"nodeType":"314","messageId":"315","endLine":75,"endColumn":22},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"302","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"329","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"329","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"297","severity":1,"message":"352","line":4,"column":8,"nodeType":"299","messageId":"300","endLine":4,"endColumn":22},{"ruleId":"297","severity":1,"message":"353","line":2,"column":21,"nodeType":"299","messageId":"300","endLine":2,"endColumn":26},{"ruleId":"297","severity":1,"message":"354","line":8,"column":3,"nodeType":"299","messageId":"300","endLine":8,"endColumn":20},{"ruleId":"297","severity":1,"message":"355","line":3,"column":8,"nodeType":"299","messageId":"300","endLine":3,"endColumn":21},{"ruleId":"297","severity":1,"message":"356","line":22,"column":10,"nodeType":"299","messageId":"300","endLine":22,"endColumn":20},{"ruleId":"357","severity":1,"message":"358","line":50,"column":69,"nodeType":"308","endLine":50,"endColumn":84},{"ruleId":"312","severity":1,"message":"313","line":61,"column":53,"nodeType":"314","messageId":"315","endLine":61,"endColumn":55},{"ruleId":"312","severity":1,"message":"313","line":102,"column":29,"nodeType":"314","messageId":"315","endLine":102,"endColumn":31},{"ruleId":"297","severity":1,"message":"359","line":21,"column":9,"nodeType":"299","messageId":"300","endLine":21,"endColumn":18},{"ruleId":"297","severity":1,"message":"360","line":67,"column":8,"nodeType":"299","messageId":"300","endLine":67,"endColumn":11},{"ruleId":"297","severity":1,"message":"329","line":2,"column":15,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"357","severity":1,"message":"358","line":10,"column":28,"nodeType":"308","endLine":10,"endColumn":43},{"ruleId":"297","severity":1,"message":"309","line":2,"column":17,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"316","severity":1,"message":"361","line":48,"column":6,"nodeType":"318","endLine":48,"endColumn":13,"suggestions":"362"},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"302","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"329","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"297","severity":1,"message":"363","line":4,"column":8,"nodeType":"299","messageId":"300","endLine":4,"endColumn":22},{"ruleId":"297","severity":1,"message":"352","line":10,"column":8,"nodeType":"299","messageId":"300","endLine":10,"endColumn":22},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"302","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"329","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"297","severity":1,"message":"309","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"302","line":2,"column":16,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"329","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"297","severity":1,"message":"364","line":6,"column":8,"nodeType":"299","messageId":"300","endLine":6,"endColumn":15},{"ruleId":"297","severity":1,"message":"365","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":19},{"ruleId":"297","severity":1,"message":"309","line":2,"column":17,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"297","severity":1,"message":"309","line":2,"column":17,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},"no-native-reassign",["366"],"no-negated-in-lhs",["367"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'NavbarBrand' is defined but never used.","'Badge' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Card' is defined but never used.","'input' is assigned a value but never used.","'setInput' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'messagesEndRef'. Either include it or remove the dependency array.","ArrayExpression",["368"],"'setIncoming' is assigned a value but never used.","'serverStatus' is assigned a value but never used.","'setServerStatus' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'configuration', 'dataList', 'processData', 'setConfiguration', and 'setDataList'. Either include them or remove the dependency array.",["369"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Button' is defined but never used.","'Chart' is defined but never used.","'Line' is defined but never used.","'Scatter' is defined but never used.","'VictoryZoomContainer' is defined but never used.","'VictoryScatter' is defined but never used.","'VictoryCursorContainer' is defined but never used.","'VictoryLine' is defined but never used.","'VictorHistogram' is defined but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'temperatureData' is assigned a value but never used.","'label' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'faHistory' is defined but never used.","'Dropzone' is defined but never used.","'faUpload' is defined but never used.","'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'isDragActive' is assigned a value but never used.","'toggleOverwrite' is defined but never used.","'LoadingSpinner' is defined but never used.","'Alert' is defined but never used.","'faExternalLinkAlt' is defined but never used.","'ReactMarkdown' is defined but never used.","'isReadOnly' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'ipAddress' is assigned a value but never used.","'sdk' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'network.host' and 'props.type'. Either include them or remove the dependency array.",["370"],"'SettingsObject' is defined but never used.","'Boolean' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},"Update the dependencies array to be: [content, messagesEndRef]",{"range":"377","text":"378"},"Update the dependencies array to be: [configuration, dataList, incoming, processData, setConfiguration, setDataList]",{"range":"379","text":"380"},"Update the dependencies array to be: [count, network.host, props.type]",{"range":"381","text":"382"},[349,358],"[content, messagesEndRef]",[3756,3766],"[configuration, dataList, incoming, processData, setConfiguration, setDataList]",[1473,1480],"[count, network.host, props.type]"]